name: DMPro Lambda Deploy
run-name: DMPro Lambda Deploy - ${{ inputs.branch }}

permissions: write-all

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from semver"
        value: ${{ jobs.pnpm-build.outputs.version }}
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      repo:
        required: false
        description: "Lambda repository"
        type: string
        default: "dmpro-agent-scheduler"
      branch:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      node_versions:
        description: 'node versions'
        required: true
        default: "['20.14.0']"
        type: string
      service: 
        required: false
        description: "service selector"
        type: string
        default: "none"

env:
  CODEFREEZE: ${{ secrets.CODEFREEZE }}
  GH_PAT_AUTOMATION: ${{ secrets.GH_PAT_AUTOMATION_SEMANTIC_RELEASE }} #${{ secrets.GH_PAT_AUTOMATION }}

jobs:
  init: 
    name: Lambda Deploy Init
    runs-on: ubuntu-latest
    environment: dm_${{ inputs.branch }}
    
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      account: ${{ steps.set_env.outputs.account }}
      json_path: ${{ steps.set_env.outputs.json_path }}
      bucket: ${{ steps.set_env.outputs.bucket }}
      function_name: ${{ steps.set_env.outputs.function_name }}

    steps:
      - name: set env
        id: set_env
        run: |
         
          if [ "${{ inputs.service == 'email'}}" ]; then
            function_name=${{ vars.FUNCTION_EMAIL }}
          else
            function_name=${{ vars.FUNCTION_UPGRADE }}
          fi

          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          echo "account=${{ vars.ACCOUNT }}" >> $GITHUB_OUTPUT
          echo "json_path=${{ vars.JSONPATH }}" >> $GITHUB_OUTPUT
          echo "bucket=${{ vars.BUCKET }}" >> $GITHUB_OUTPUT
          echo "function_name=$function_name" >> $GITHUB_OUTPUT

  versioning: 
    name: Lambda Versioning
    outputs:
      version: ${{ steps.version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout other repository
        if: ${{ inputs.branch == 'release' }}
        uses: actions/checkout@v3
        with:
          repository: cloud-development-team/${{ inputs.repo }} 
          ref: ${{ inputs.branch }}  
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
          fetch-depth: 0 

      - name: Semantic Version
        if: ${{ inputs.branch == 'release' }}
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: ${{ inputs.branch == 'release' && 'v${major}.${minor}.${patch}' || 'dev${major}.${minor}.${patch}' }}
          change_path: "."
          bump_each_commit: true
          search_commit_body: true

  npm-build:
    name: Node Build And Lambda Deploy
    runs-on: ubuntu-latest
    environment: aws
    needs: [init, versioning]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: ${{ inputs.branch == 'release' }}
        with:
          repository: cloud-development-team/${{ inputs.repo }}
          ref: refs/heads/release #release브랜치만 있음
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup Node.js
        if: ${{ inputs.branch == 'release' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Login to NPM
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |        
          npm install -g npm-cli-login 
          npm-cli-login -u hvc_automation -p ${{ env.GH_PAT_AUTOMATION }} -e sdo016-prod@hanwha.com -r https://npm.pkg.github.com

      - name: Install dependencies
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm install

      - name: Build
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm run build
          echo "================"
          ls -al src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE }}
          role-session-name: GitHub-Actions-Assume
          aws-region: ${{ needs.init.outputs.region }}

      - name: Zip build output
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          zip -qry function.zip ./dist

      - name: Lambda Code Update
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.init.outputs.account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          if ${{ inputs.branch == 'release' }}; then
            VERSION=${{ needs.versioning.outputs.version }}
            echo "Current function_name: ${{ needs.init.outputs.function_name }}"
            # aws s3 cp function.zip s3://${{ needs.init.outputs.bucket }}/lambda-build/function.zip --metadata version=$VERSION
          elif ${{ inputs.branch == 'production' }}; then
            echo "Current function_name: ${{ needs.init.outputs.function_name }}"
            # aws s3 cp s3://${{ needs.init.outputs.bucket }}/lambda-build/function.zip ./function.zip
            VERSION=$(aws s3api head-object --bucket ${{ needs.init.outputs.bucket }} --key lambda-build/function.zip --query 'Metadata.version' --output text)
            # aws s3 rm s3://${{ needs.init.outputs.bucket }}/lambda-build/function.zip
          fi

          aws lambda update-function-code --function-name $function_name --zip-file fileb://function.zip > /dev/null
            while true; do
              STATUS=$(aws lambda get-function --function-name $function_name --query 'Configuration.[LastUpdateStatus]' --output text)
              if [ "$STATUS" == "Successful" ]; then
                echo "Lambda update completed. Proceeding with version publishing."
                break
              else
                echo "Update in progress. Waiting..."
                sleep 3
              fi
            done
          aws lambda publish-version --function-name $function_name --description "$VERSION" > /dev/null

  gitops-update-call-email:
    needs: [init, versioning, npm-build]
    if: ${{ inputs.service == 'email' }}
    uses: cloud-development-team/.github/.github/workflows/gitops-update.yaml@main
    with:
      repository_name: "cloud-development-team/dmpro-gitops"
      image_name: "no_eks"
      image_tag: ${{ needs.versioning.outputs.version }}-image
      yaml_path: "no_eks"
      json_path: ${{ needs.init.outputs.json_path }}
      application_name: "dmpro-agent-scheduler-email"
    secrets: inherit

  gitops-update-call-upgrade:
    needs: [init, versioning, npm-build]
    if: ${{ inputs.service == 'upgrade' }}
    uses: cloud-development-team/.github/.github/workflows/gitops-update.yaml@main
    with:
      repository_name: "cloud-development-team/dmpro-gitops"
      image_name: "no_eks"
      image_tag: ${{ needs.versioning.outputs.version }}-upgrade
      yaml_path: "no_eks"
      json_path: ${{ needs.init.outputs.json_path }}
      application_name: "dmpro-agent-scheduler-upgrade"
    secrets: inherit

  create-release:
    name: Create Lambda Github Release
    if: ${{ inputs.branch == 'release' }}
    needs: [versioning, npm-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ inputs.repo }}
          ref: refs/heads/${{ inputs.branch }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
          fetch-depth: 0

      - name: Check if Tag Exists
        id: tag_check
        run: |
          if git rev-parse "refs/tags/${{ needs.versioning.outputs.version }}" >/dev/null 2>&1; then
            echo "::set-output name=tag_exists::true"
          else
            echo "::set-output name=tag_exists::false"
          fi

      - name: Create Release
        if: steps.tag_check.outputs.tag_exists == 'false' 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          repo: ${{ inputs.repo }}
          release_name: ${{ needs.versioning.outputs.version }}
          body: ${{ steps.release_changelog.outputs.changelog }}
          commitish: ${{ inputs.branch }}
