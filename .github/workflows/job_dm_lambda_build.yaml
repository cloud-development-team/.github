name: DMPro Lambda Deploy
run-name: DMPro Lambda Deploy - ${{ inputs.branch }}

permissions: write-all

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from semver"
        value: ${{ jobs.pnpm-build.outputs.version }}
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      repo:
        required: false
        description: "Lambda repository"
        type: string
        default: "dmpro-agent-scheduler"
      branch:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      node_versions:
        description: 'node versions'
        required: false
        default: "['20.14.0']"
        type: string
      service: 
        required: false
        description: "service selector"
        type: string
        default: "none"
      range:
        required: false
        description: "Range of the release"
        type: string
        default: "false"
      layer_name:
        required: false
        description: "Layer name for the lambda function"
        type: string
        default: "none"

env:
  CODEFREEZE: ${{ secrets.CODEFREEZE }}
  GH_PAT_AUTOMATION: ${{ secrets.GH_PAT_AUTOMATION_SEMANTIC_RELEASE }} #${{ secrets.GH_PAT_AUTOMATION }}

jobs:
  init: 
    name: Lambda Deploy Init ${{ inputs.branch }}
    runs-on: ubuntu-latest
    environment: dm_${{ inputs.branch }}
    
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      account: ${{ steps.set_env.outputs.account }}
      json_path: ${{ steps.set_env.outputs.json_path }}
      bucket: ${{ steps.set_env.outputs.bucket }}
      function_name: ${{ steps.set_env.outputs.function_name }}

    steps:
      - name: set env
        id: set_env
        run: |
          echo "set env"
         
          if [ "${{ inputs.service }}" == "email" ]; then
            echo "function_name=${{ vars.FUNCTION_EMAIL }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.service }}" == "upgrade" ]; then
            echo "function_name=${{ vars.FUNCTION_UPGRADE }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.service }}" == "syncw" ]; then
            echo "function_name=${{ vars.FUNCTION_SYNCW }}" >> $GITHUB_OUTPUT
          elif [ "${{ inputs.service }}" == "callback" ]; then
            echo "function_name=${{ vars.FUNCTION_CALLBACK }}" >> $GITHUB_OUTPUT
          fi

          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          echo "account=${{ vars.ACCOUNT }}" >> $GITHUB_OUTPUT
          echo "json_path=${{ vars.JSONPATH }}" >> $GITHUB_OUTPUT
          echo "bucket=${{ vars.BUCKET }}" >> $GITHUB_OUTPUT

  versioning: 
    name: Lambda Versioning
    outputs:
      version: ${{ steps.version.outputs.version }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout other repository
        if: ${{ inputs.branch == 'release' }}
        uses: actions/checkout@v3
        with:
          repository: cloud-development-team/${{ inputs.repo }} 
          ref: ${{ inputs.branch }}  
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
          fetch-depth: 0 

      - name: Semantic Version
        if: ${{ inputs.branch == 'release' }}
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          change_path: "."
          namespace: ${{ inputs.service }}
          tag_prefix: "v"
          version_format: "${{ inputs.service}}${major}.${minor}.${patch}"
          bump_each_commit: true     

  npm-build:
    name: Node Build And Lambda Deploy
    runs-on: ubuntu-latest
    environment: aws
    needs: [init, versioning]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ inputs.repo }}
          ref: refs/heads/release #release브랜치만 있음
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup Node.js
        if: ${{ inputs.branch == 'release' }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Login to NPM
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |        
          npm install -g npm-cli-login 
          npm-cli-login -u hvc_automation -p ${{ env.GH_PAT_AUTOMATION }} -e sdo016-prod@hanwha.com -r https://npm.pkg.github.com

      - name: Install dependencies
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm install

      - name: Build
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm run build
          echo "================"
          ls -al src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE }}
          role-session-name: GitHub-Actions-Assume
          aws-region: ${{ needs.init.outputs.region }}

      - name: Lambda Environment Update
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Assume Role using an Automation Key
          
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.init.outputs.account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          if [[ "${{ inputs.branch }}" == 'release' ]]; then
            env_path="./env/qa.json"
          else
            env_path="./env/prod.json"
          fi

          pwd
          
          NEW_VARS=$(jq -r 'to_entries | map("\(.key)=\"\(.value)\"") | join(", ")' $env_path)
          function_name=${{ needs.init.outputs.function_name }}

          aws lambda update-function-configuration \
                --function-name $function_name \
                --environment "Variables={$NEW_VARS}" > /dev/null

          while true; do
            STATUS=$(aws lambda get-function --function-name $function_name --query 'Configuration.[LastUpdateStatus]' --output text)
            echo "Current STATUS: $STATUS"
            if [ "$STATUS" == "Successful" ]; then
              echo "Environment updated."
              break
            else
              echo "Environment Update in progress. Waiting..."
              sleep 3
            fi
          done
      
      - name: Zip build output
        if: ${{ inputs.branch == 'release' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          zip -qry function.zip ./dist

      - name: Layer Update(if needed)
        if: ${{ inputs.range == 'layer' }}
        working-directory: ${{ inputs.working_dir }}
        run: |
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.init.outputs.account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          function_name=${{ needs.init.outputs.function_name }}
          
          mkdir -p nodejs && cp -r node_modules nodejs/
          zip -r modules.zip nodejs

          var_new_layer_arn=$(aws lambda publish-layer-version \
          --layer-name ${{ inputs.layer_name }} \
          --description "Updated Layer ${{ inputs.sem_ver }}" \
          --zip-file fileb://modules.zip \
          --compatible-runtimes nodejs20.x \
          --query 'LayerVersionArn' \
          --output text) 

          var_new_layer_ver=$(echo "$var_new_layer_arn" | awk -F: '{print $8}')
          var_new_layer_prefix=$(echo "$var_new_layer_arn" | awk -F: '{OFS=":"; print $1,$2,$3,$4,$5,$6,$7}')

          echo "$var_new_layer_ver"

          var_current_layers=$(aws lambda get-function-configuration \
          --function-name $function_name \
          --query 'Layers[*].Arn' \
          --output text)

          var_new_layers=$(echo "$var_current_layers" | sed -E "s|${var_new_layer_prefix}:[0-9]+|${var_new_layer_prefix}:${var_new_layer_ver}|")
          var_new_layers=$(echo "$var_new_layers" | tr '\t' ' ')

          echo "$var_new_layers"
          read -a layer_array <<< "$var_new_layers"
          echo "Layer Array: ${layer_array[@]}"
          aws lambda update-function-configuration --function-name $function_name --layers "${layer_array[@]}" > /dev/null
          while true; do
            STATUS=$(aws lambda get-function --function-name $function_name --query 'Configuration.[LastUpdateStatus]' --output text)
            echo "Current STATUS: $STATUS"
            if [ "$STATUS" == "Successful" ]; then
              echo "Lambda update completed. Proceeding with version publishing."
              break
            else
              echo "Update in progress. Waiting..."
              sleep 3
            fi
          done

      - name: Lambda Code Update
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.init.outputs.account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          function_name=${{ needs.init.outputs.function_name }}

          if [[ "${{ inputs.branch }}" == 'release' ]]; then
            VERSION=${{ needs.versioning.outputs.version }}
            echo "Current function_name: ${{ needs.init.outputs.function_name }}"
            aws s3 cp function.zip s3://${{ needs.init.outputs.bucket }}/lambda-build/${{ inputs.service }}/function.zip --metadata version=$VERSION

            aws lambda update-function-code --function-name $function_name --zip-file fileb://function.zip > /dev/null
              while true; do
                STATUS=$(aws lambda get-function --function-name $function_name --query 'Configuration.[LastUpdateStatus]' --output text)
                if [ "$STATUS" == "Successful" ]; then
                  echo "Lambda update completed. Proceeding with version publishing."
                  break
                else
                  echo "Update in progress. Waiting..."
                  sleep 3
                fi
              done
            aws lambda publish-version --function-name $function_name --description "$VERSION" > /dev/null

          elif [[ "${{ inputs.branch }}" == 'production' ]]; then
            aws s3 cp s3://${{ needs.init.outputs.bucket }}/lambda-build/${{ inputs.service }}/function.zip ./function-${{ inputs.service }}.zip
            
            VERSION=$(aws s3api head-object --bucket ${{ needs.init.outputs.bucket }} --key lambda-build/${{ inputs.service }}/function.zip --query 'Metadata.version' --output text)
    
            aws lambda update-function-code --function-name $function_name --zip-file fileb://function-${{ inputs.service }}.zip > /dev/null
              while true; do
                STATUS=$(aws lambda get-function --function-name $function_name --query 'Configuration.[LastUpdateStatus]' --output text)
                if [ "$STATUS" == "Successful" ]; then
                  echo "Lambda update completed. Proceeding with version publishing."
                  break
                else
                  echo "Update in progress. Waiting..."
                  sleep 3
                fi
              done
            aws lambda publish-version --function-name $function_name --description "$VERSION" > /dev/null

            aws s3 rm s3://${{ needs.init.outputs.bucket }}/lambda-build/${{ inputs.service }}/function.zip
          fi

  gitops-update-call-email:
    needs: [init, versioning, npm-build]
    if: ${{ inputs.service == 'email' }}
    uses: cloud-development-team/.github/.github/workflows/gitops-update.yaml@main
    with:
      repository_name: "cloud-development-team/dmpro-gitops"
      image_name: "no_eks"
      image_tag: ${{ needs.versioning.outputs.version }}-email
      yaml_path: "no_eks"
      json_path: ${{ needs.init.outputs.json_path }}
      application_name: "dmpro-agent-scheduler-email"
    secrets: inherit

  gitops-update-call-upgrade:
    needs: [init, versioning, npm-build]
    if: ${{ inputs.service == 'upgrade' }}
    uses: cloud-development-team/.github/.github/workflows/gitops-update.yaml@main
    with:
      repository_name: "cloud-development-team/dmpro-gitops"
      image_name: "no_eks"
      image_tag: ${{ needs.versioning.outputs.version }}-upgrade
      yaml_path: "no_eks"
      json_path: ${{ needs.init.outputs.json_path }}
      application_name: "dmpro-agent-scheduler-upgrade"
    secrets: inherit
  
  gitops-update-call-syncw:
    needs: [init, versioning, npm-build]
    if: ${{ inputs.service == 'syncw' }}
    uses: cloud-development-team/.github/.github/workflows/gitops-update.yaml@main
    with:
      repository_name: "cloud-development-team/dmpro-gitops"
      image_name: "no_eks"
      image_tag: ${{ needs.versioning.outputs.version }}-syncw
      yaml_path: "no_eks"
      json_path: ${{ needs.init.outputs.json_path }}
      application_name: "dmpro-agent-scheduler-syncw"
    secrets: inherit

  gitops-update-call-callback:
    needs: [init, versioning, npm-build]
    if: ${{ inputs.service == 'callback' }}
    uses: cloud-development-team/.github/.github/workflows/gitops-update.yaml@main
    with:
      repository_name: "cloud-development-team/dmpro-gitops"
      image_name: "no_eks"
      image_tag: ${{ needs.versioning.outputs.version }}-callback
      yaml_path: "no_eks"
      json_path: ${{ needs.init.outputs.json_path }}
      application_name: "dmpro-agent-scheduler-callback"
    secrets: inherit

  create-release:
    name: Create Lambda Github Release
    if: ${{ inputs.branch == 'release' }}
    needs: [versioning, npm-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ inputs.repo }}
          ref: refs/heads/${{ inputs.branch }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
          fetch-depth: 0

      - name: Check if Tag Exists
        id: tag_check
        run: |
          if git rev-parse "refs/tags/${{ needs.versioning.outputs.version }}" >/dev/null 2>&1; then
            echo "::set-output name=tag_exists::true"
          else
            echo "::set-output name=tag_exists::false"
          fi

      - name: Create Release
        if: steps.tag_check.outputs.tag_exists == 'false' 
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          repo: ${{ inputs.repo }}
          release_name: ${{ needs.versioning.outputs.version }}
          body: ${{ steps.release_changelog.outputs.changelog }}
          commitish: ${{ inputs.branch }}