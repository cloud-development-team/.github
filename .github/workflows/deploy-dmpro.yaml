name: DMPro Deploy
run-name: DMPro Deploy - ${{ inputs.release_env }}

permissions: write-all

on:
  workflow_call:
    inputs:
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release environment'
        required: true
        default: ""
        type: string
      release_repo:
        description: 'Release Repository'
        required: true
        default: ""
        type: string                  
      qa_aws_account:
        required: false
        description: "dmpro qa aws account id"
        type: string
        default: "027903527077"
      prod_aws_account:
        required: false
        description: "dmpro prod aws account id"
        type: string
        default: "390418701413"
      qa_fe_bucket:
        required: false
        description: "dmpro qa FE bucket"
        type: string
        default: "dmpro013-static-qa-ue1-001"
      prod_fe_bucket:
        required: false
        description: "dmpro prod FE bucket"
        type: string
        default: "dmpro013-static-prod-ue1-001"
      prod_cf_distribution_id:
        required: false
        description: "prod_cf_distribution_id"
        type: string
        default: "E15PGHBUR9J4EE"
      dm_sw_ver:
        required: true
        description: "major or minor"
        type: string
        default: "major"
      dm_lambda_repo:
        required: false
        description: "lambda deploy"
        type: string
        default: "lambda"

jobs:
  lambda-detect-changes:
    name: Detect DMPro lambda Changes
    runs-on: ubuntu-latest
    outputs:
      email: ${{ steps.set.outputs.email }}
      upgrade: ${{ steps.set.outputs.upgrade }}
      syncw: ${{ steps.set.outputs.syncw }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          repository: cloud-development-team/${{ inputs.dm_lambda_repo }}
          ref: refs/heads/release
          fetch-depth: 0
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Compare changes
        id: set
        run: |
          # fetch previous commit from main for comparison
          git diff HEAD^1 HEAD^2 --name-only

          # default false
          echo "email=true" >> $GITHUB_OUTPUT
          echo "upgrade=false" >> $GITHUB_OUTPUT
          echo "syncw=true" >> $GITHUB_OUTPUT
          
          if git diff HEAD^1 HEAD^2 --name-only | grep -q 'lambda/firmware_email/'; then
            if git diff HEAD^1 HEAD^2 --name-only | grep -q  'lambda/firmware_email/package-lock.json'; then
              echo "email=layer"
              echo "email=layer" >> $GITHUB_OUTPUT
            else
              echo "email=true"
              echo "email=true" >> $GITHUB_OUTPUT
            fi
          fi

          if git diff HEAD^1 HEAD^2 --name-only | grep -q 'lambda/firmware_upgrade/'; then
            if git diff HEAD^1 HEAD^2 --name-only | grep -q 'lambda/firmware_upgrade/package-lock.json'; then
              echo "upgrade=layer" 
              echo "upgrade=layer" >> $GITHUB_OUTPUT
            else
              echo "upgrade=true"
              echo "upgrade=true" >> $GITHUB_OUTPUT
            fi
          fi

          if git diff HEAD^1 HEAD^2 --name-only | grep -q 'lambda/warranty_sync/'; then
            if git diff HEAD^1 HEAD^2 --name-only | grep -q 'lambda/warranty_sync/package-lock.json'; then
              echo "syncw=layer"
              echo "syncw=layer" >> $GITHUB_OUTPUT
            else
              echo "syncw=true"
              echo "syncw=true" >> $GITHUB_OUTPUT
            fi
          fi    

  qa-deploy-lambda-email:
    name: DMPro QA Lambda Deploy Email
    needs: [lambda-detect-changes]
    if: ${{ (inputs.release_env == 'QA' || inputs.release_env == 'QA/MINOR' || inputs.release_env == 'QA/BOTH') && (needs.lambda-detect-changes.outputs.email == 'true' || needs.lambda-detect-changes.outputs.email == 'layer') }}
    uses: ./.github/workflows/job_dm_lambda_build.yaml
    with:
      branch: release
      repo: ${{ inputs.dm_lambda_repo }}         
      working_dir: ./lambda/firmware_email
      node_versions: "['20.14.0']"
      service: "email"
      layer_name: "module_email"
      range: ${{ needs.lambda-detect-changes.outputs.email }}
    secrets: inherit

  qa-deploy-lambda-upgrade:
    name: DMPro QA Lambda Deploy Upgrade
    needs: [lambda-detect-changes]
    if: ${{ (inputs.release_env == 'QA' || inputs.release_env == 'QA/MINOR' || inputs.release_env == 'QA/BOTH') && (needs.lambda-detect-changes.outputs.upgrade == 'true' || needs.lambda-detect-changes.outputs.upgrade == 'layer') }}
    uses: ./.github/workflows/job_dm_lambda_build.yaml
    with:
      branch: release
      repo: ${{ inputs.dm_lambda_repo }}         
      working_dir: ./lambda/firmware_upgrade
      node_versions: "['20.14.0']"
      service: "upgrade"
      layer_name: "module"
      range: ${{ needs.lambda-detect-changes.outputs.upgrade }}
    secrets: inherit

  qa-deploy-lambda-syncw:
    name: DMPro QA Lambda Deploy SyncW
    needs: [lambda-detect-changes]
    if: ${{ (inputs.release_env == 'QA' || inputs.release_env == 'QA/MINOR' || inputs.release_env == 'QA/BOTH') && (needs.lambda-detect-changes.outputs.syncw == 'true' || needs.lambda-detect-changes.outputs.syncw == 'layer') }}
    uses: ./.github/workflows/job_dm_lambda_build.yaml
    with:
      branch: release
      repo: ${{ inputs.dm_lambda_repo }}         
      working_dir: ./lambda/warranty_sync
      node_versions: "['20.14.0']"
      service: "syncw"
      layer_name: "module_syncwarranty"
      range: ${{ needs.lambda-detect-changes.outputs.syncw }}
    secrets: inherit

  qa-deploy: #inside gitops repo
    name: DMPro QA Deploy
    if: ${{ inputs.release_env == 'QA' || inputs.release_env == 'QA/MINOR' || inputs.release_env == 'QA/BOTH'}} 
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ inputs.release_repo }}
          ref: refs/heads/main
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Update version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["MainVersion"] = "${{ inputs.release_version }}"' qa_version.json     
            yq -i '.["JiraReleaseVersion"].["SWVersion"] = "${{ inputs.dm_sw_ver }}"' qa_version.json     

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' qa_version.json

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Deploy
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              service_name=$(echo "$line" | awk -F':' '{print $1}')
            elif [[ $line == *"image-tag"* ]]; then
              image_tag=$(echo "$line" | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
              yq -i '
                .image.tag = "'$image_tag'"
              ' ./$service_name/env/qa.yaml || true
            fi
          done < qa_version.yaml

      - name: Copy the qa_version.yaml file to prod_version.yaml file.
        run: |
          pwd
          ls -la
          cp qa_version.yaml prod_version.yaml
          cp qa_version.json prod_version.json

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "cd: deploy qa for ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::619268642609:role/HVC-admin-automation
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1
      
      # Static file upload
      - name: Static File Update - QA
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn arn:aws:iam::${{ inputs.qa_aws_account }}:role/AWSControlTowerExecution \
          --role-session-name GitHubPipeline \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          sync_and_invalidate() {
            local build_path=$1
            local target_path=$2
            local distribution_id=$3

            if aws s3 ls "$build_path" ; then
              # Sync S3 Bucket
              aws s3 sync "$build_path" "$target_path" --delete
              aws s3 rm "$build_path" --recursive

              # Setting CloudFront
              aws cloudfront create-invalidation --distribution-id "$distribution_id" --paths "/*"
            else
              echo "S3 path $build_path does not exist. Skipping sync and invalidation."
            fi
          }

          if [[ "${{ inputs.release_env }}" == 'QA' ]]; then
            sync_and_invalidate "s3://${{ inputs.qa_fe_bucket }}/major/pre-out/" "s3://${{ inputs.qa_fe_bucket }}/major/out" "EESFSOKQTN9WW"
          elif [[ "${{ inputs.release_env }}" == 'QA/MINOR' ]]; then
            sync_and_invalidate "s3://${{ inputs.qa_fe_bucket }}/minor/pre-out/" "s3://${{ inputs.qa_fe_bucket }}/minor/out" "E32VCJC4FYWR6P"
          elif [[ "${{ inputs.release_env }}" == 'QA/BOTH' ]]; then
            sync_and_invalidate "s3://${{ inputs.qa_fe_bucket }}/major/pre-out/" "s3://${{ inputs.qa_fe_bucket }}/major/out" "EESFSOKQTN9WW"
            sync_and_invalidate "s3://${{ inputs.qa_fe_bucket }}/minor/pre-out/" "s3://${{ inputs.qa_fe_bucket }}/minor/out" "E32VCJC4FYWR6P"
          fi

  #1.0.2 SSR 구성
  hotfix-deploy:
    name: DMPro HOTFIX Deploy
    if: ${{ inputs.release_env == 'HOTFIX' }}
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ inputs.release_repo }}
          ref: refs/heads/main
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Update version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["MainVersion"] = "${{ inputs.release_version }}"' hotfix_version.json     

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' hotfix_version.json

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Deploy
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              service_name=$(echo "$line" | awk -F':' '{print $1}')
            elif [[ $line == *"image-tag"* ]]; then
              image_tag=$(echo "$line" | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
              yq -i '
                .image.tag = "'$image_tag'"
              ' ./$service_name/env/hotfix.yaml || true
            fi
          done < hotfix_version.yaml

      - name: Copy the hotfix_version.yaml file to prod_version.yaml file.
        run: |
          pwd
          ls -la
          cp hotfix_version.yaml prod_version1.yaml
          cp hotfix_version.json prod_version1.json

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "cd: deploy hotfix for ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true


  prod-deploy-lambda-email:
    name: DMPro PROD Lambda Deploy Email
    needs: [lambda-detect-changes]
    if: ${{ (inputs.release_env == 'PROD' || inputs.release_env == 'PROD/MINOR' || inputs.release_env == 'PROD/BOTH') && (needs.lambda-detect-changes.outputs.email == 'true' || needs.lambda-detect-changes.outputs.email == 'layer')}}
    uses: ./.github/workflows/job_dm_lambda_build.yaml
    with:
      branch: production
      repo: ${{ inputs.dm_lambda_repo }}         
      working_dir: ./lambda/firmware_email
      node_versions: "['20.14.0']"
      service: "email"
      layer_name: " " #운영은 module_fwemail 으로 되어있음
      #range: ${{ needs.lambda-detect-changes.outputs.email }}
      range: "true"
    secrets: inherit

  prod-deploy-lambda-upgrade:
    name: DMPro PROD Lambda Deploy Upgrade
    needs: [lambda-detect-changes]
    if: ${{ (inputs.release_env == 'PROD' || inputs.release_env == 'PROD/MINOR' || inputs.release_env == 'PROD/BOTH') && (needs.lambda-detect-changes.outputs.upgrade == 'true' || needs.lambda-detect-changes.outputs.upgrade == 'layer') }}
    uses: ./.github/workflows/job_dm_lambda_build.yaml
    with:
      branch: production
      repo: ${{ inputs.dm_lambda_repo }}         
      working_dir: ./lambda/firmware_upgrade
      node_versions: "['20.14.0']"
      service: "upgrade"
      layer_name: "module"
      #range: ${{ needs.lambda-detect-changes.outputs.upgrade }}
      range: "true"
    secrets: inherit
  
  prod-deploy-lambda-syncw:
    name: DMPro PROD Lambda Deploy SyncW
    needs: [lambda-detect-changes]
    if: ${{ (inputs.release_env == 'PROD' || inputs.release_env == 'PROD/MINOR' || inputs.release_env == 'PROD/BOTH') && (needs.lambda-detect-changes.outputs.syncw == 'true' || needs.lambda-detect-changes.outputs.syncw == 'layer') }}
    uses: ./.github/workflows/job_dm_lambda_build.yaml
    with:
      branch: production
      repo: ${{ inputs.dm_lambda_repo }}         
      working_dir: ./lambda/warranty_sync
      node_versions: "['20.14.0']"
      service: "syncw"
      layer_name: "module_syncwarranty"
      #range: ${{ needs.lambda-detect-changes.outputs.syncw }}
      range: "true"
    secrets: inherit

  prod-deploy:
    name: DMPro PROD Deploy
    if: ${{ inputs.release_env == 'PROD' || inputs.release_env == 'PROD/MINOR' }} 
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ inputs.release_repo }}
          ref: refs/heads/main
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Update version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["MainVersion"] = "${{ inputs.release_version }}"' prod_version.json     
            yq -i '.["JiraReleaseVersion"].["SWVersion"] = "${{ inputs.dm_sw_ver }}"' prod_version.json

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' prod_version.json

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Deploy
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              service_name=$(echo "$line" | awk -F':' '{print $1}')
            elif [[ $line == *"image-tag"* ]]; then
              image_tag=$(echo "$line" | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
              yq -i '
                .image.tag = "'$image_tag'"
              ' ./$service_name/env/prod.yaml || true
            fi
          done < prod_version.yaml

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "cd: deploy dmpro prod version ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true
      
      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::619268642609:role/HVC-admin-automation
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1

      # Static file upload
      - name: Static File Update - PROD
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn arn:aws:iam::${{ inputs.prod_aws_account }}:role/AWSControlTowerExecution \
          --role-session-name GitHubPipeline \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          aws s3 sync s3://${{ inputs.qa_fe_bucket }}/${{ inputs.dm_sw_ver }}/out ./out
          aws s3 sync ./out s3://${{ inputs.prod_fe_bucket }}/out --delete

          # Setting CloudFront
          aws cloudfront create-invalidation --distribution-id ${{ inputs.prod_cf_distribution_id }} --paths "/*"