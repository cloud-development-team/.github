name: DMPro Deploy
run-name: DMPro Deploy - ${{ inputs.release_env }}

permissions: write-all

on:
  workflow_call:
    inputs:
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release environment'
        required: true
        default: ""
        type: string
      release_repo:
        description: 'Release Repository'
        required: true
        default: ""
        type: string                  
      qa_aws_account:
        required: false
        description: "dmpro qa aws account id"
        type: string
        default: "027903527077"
      prod_aws_account:
        required: false
        description: "dmpro prod aws account id"
        type: string
        default: "390418701413"
      qa_fe_bucket:
        required: false
        description: "dmpro qa FE bucket"
        type: string
        default: "dmpro013-static-qa-ue1-001"
      prod_pre_fe_bucket:
        required: false
        description: "dmpro prod pre FE bucket"
        type: string
        default: "dmpro013-pre-static-prod-ue1-001"
      prod_fe_bucket:
        required: false
        description: "dmpro prod FE bucket"
        type: string
        default: "dmpro013-static-prod-ue1-001"
      qa_cf_distribution_id:
        required: false
        description: "qa_cf_distribution_id"
        type: string
        default: "EOTSDFTM2NPH0"
      prod_cf_distribution_id:
        required: false
        description: "prod_cf_distribution_id"
        type: string
        default: "E216BRXBWEUM5Z"

jobs:
  qa-deploy:
    name: DMPro QA Deploy
    if: ${{ inputs.release_env == 'QA' }}
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ inputs.release_repo }}
          ref: refs/heads/main
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Update version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["MainVersion"] = "${{ inputs.release_version }}"' qa_version.json     

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' qa_version.json

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Deploy
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              service_name=$(echo "$line" | awk -F':' '{print $1}')
            elif [[ $line == *"image-tag"* ]]; then
              image_tag=$(echo "$line" | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
              yq -i '
                .image.tag = "'$image_tag'"
              ' ./$service_name/env/qa.yaml || true
            fi
          done < qa_version.yaml

      - name: Copy the qa_version.yaml file to prod_version.yaml file.
        run: |
          pwd
          ls -la
          cp qa_version.yaml prod_version.yaml
          cp qa_version.json prod_version.json

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "cd: deploy qa for ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with: 
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_AUTOMATION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_AUTOMATION }}
          aws-region: ${{ needs.init.outputs.region }}

      # Static file upload
      - name: Static File Update - QA
        run: |
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn arn:aws:iam::${{ inputs.qa_aws_account }}:role/AWSControlTowerExecution \
          --role-session-name GitHubPipeline \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          # Check who am I
          aws sts get-caller-identity

          # Sync S3 Bucket
          aws s3 sync s3://${{ inputs.qa_fe_bucket }}/pre-out s3://${{ inputs.qa_fe_bucket }}/out --delete
          aws s3 rm s3://${{ inputs.qa_fe_bucket }}/pre-out --recursive

          # Setting CloudFront
          aws cloudfront create-invalidation --distribution-id ${{ inputs.qa_cf_distribution_id }} --paths "/*"


  hotfix-deploy:
    name: DMPro HOTFIX Deploy
    if: ${{ inputs.release_env == 'HOTFIX' }}
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ inputs.release_repo }}
          ref: refs/heads/main
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Update version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["MainVersion"] = "${{ inputs.release_version }}"' hotfix_version.json     

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' hotfix_version.json

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Deploy
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              service_name=$(echo "$line" | awk -F':' '{print $1}')
            elif [[ $line == *"image-tag"* ]]; then
              image_tag=$(echo "$line" | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
              yq -i '
                .image.tag = "'$image_tag'"
              ' ./$service_name/env/hotfix.yaml || true
            fi
          done < hotfix_version.yaml

      - name: Copy the hotfix_version.yaml file to prod_version.yaml file.
        run: |
          pwd
          ls -la
          cp hotfix_version.yaml prod_version1.yaml
          cp hotfix_version.json prod_version1.json

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "cd: deploy hotfix for ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true

  prod-deploy:
    name: DMPro PROD Deploy
    if: ${{ inputs.release_env == 'PROD' }}
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ inputs.release_repo }}
          ref: refs/heads/main
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          
      - name: Update version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["MainVersion"] = "${{ inputs.release_version }}"' prod_version.json     

      - name: Get Time
        id: time
        uses: nanzm/get-time-action@master
        with:
          timeZone: UTC-9
          format: 'YYYY-MM-DD HH:mm:ss'

      - name: Update Release date to version.json information
        uses: mikefarah/yq@v4.34.2
        with:
          cmd: |
            yq -i '.["JiraReleaseVersion"].["ReleaseDate"] = "${{ steps.time.outputs.time }}"' prod_version.json

      - name: Install yq
        run: |
          wget https://github.com/mikefarah/yq/releases/download/v4.34.2/yq_linux_amd64 -O /usr/local/bin/yq
          chmod +x /usr/local/bin/yq

      - name: Deploy
        run: |
          while IFS= read -r line; do
            if [[ "${line:0:1}" != " " ]]; then
              service_name=$(echo "$line" | awk -F':' '{print $1}')
            elif [[ $line == *"image-tag"* ]]; then
              image_tag=$(echo "$line" | awk -F': "' '{print $2}' | awk -F'"' '{print $1}')
              yq -i '
                .image.tag = "'$image_tag'"
              ' ./$service_name/env/prod.yaml || true
            fi
          done < prod_version.yaml

      - name: Commit changes
        run: |
          git config user.name "GitHub Actions Bot" && \
          git config user.email "<>" && \
          git add --all
          git commit -m "cd: deploy dmpro prod version ${{ inputs.release_version }}" && \
          git push origin main
        continue-on-error: true
      
      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::619268642609:role/HVC-admin-automation
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1

      # # Static file upload
      # - name: Static File Update - PROD
      #   run: |
      #     export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
      #     $(aws sts assume-role \
      #     --role-arn arn:aws:iam::${{ inputs.qa_aws_account }}:role/AWSControlTowerExecution \
      #     --role-session-name GitHubPipeline \
      #     --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
      #     --output text))

      #     # Check who am I
      #     aws sts get-caller-identity

      #     # Sync S3 Bucket
      #     aws s3 sync s3://${{ inputs.qa_fe_bucket }}/out ./out           

      #     export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
      #     $(aws sts assume-role \
      #     --role-arn arn:aws:iam::${{ inputs.prod_aws_account }}:role/AWSControlTowerExecution \
      #     --role-session-name GitHubPipeline \
      #     --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
      #     --output text))

      #     # Sync S3 Bucket
      #     aws s3 sync ./out s3://${{ inputs.prod_fe_bucket }}/out --delete

      #     # Setting CloudFront
      #     aws cloudfront create-invalidation --distribution-id ${{ inputs.prod_cf_distribution_id }} --paths "/*"



