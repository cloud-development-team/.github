name: SightMind Backend Deploy
run-name: SightMind Backend Deploy - ${{ inputs.release_env }}

permissions: write-all

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from semver"
        value: ${{ jobs.pnpm-build.outputs.version }}
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      node_versions:
        required: false
        description: "List of node version which want to scan"
        type: string
        default: "['20.14.0']" #"['18.16']"
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      backend_repo:
        description: 'backend Repo'
        required: true
        default: ""
        type: string
      target_branch:
          description: 'Target Branch'
          required: true
          default: ""
          type: string

env:
  CODEFREEZE: ${{ secrets.CODEFREEZE }}
  GH_PAT_AUTOMATION: ${{ secrets.GH_PAT_AUTOMATION_SEMANTIC_RELEASE }} #${{ secrets.GH_PAT_AUTOMATION }}

jobs:
  init:
    runs-on: ubuntu-latest
    environment: auth_backend_${{ inputs.target_branch }}
    
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      s3_bucket: ${{ steps.set_env.outputs.s3_bucket }}
      s3_account: ${{ steps.set_env.outputs.s3_account }}

    steps:
      - name: set env
        id: set_env
        run: |
          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          # echo "s3_bucket=${{ vars.S3_BUCKET }}" >> $GITHUB_OUTPUT
          # echo "s3_bucket=sm018-cicd-test-d-an2" >> $GITHUB_OUTPUT
          echo "s3_account=${{ vars.S3_ACCOUNT }}" >> $GITHUB_OUTPUT

  pnpm-build:
    name: Run Node Build
    runs-on: ubuntu-latest
    environment: sm_aws
    needs: [init]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}
        # node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ inputs.backend_repo }}
          ref: refs/heads/${{ inputs.target_branch}}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup Node.js
        if: inputs.target_branch != 'production'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      # - name: Cache npm dependencies
      #   if: inputs.target_branch != 'production'
      #   uses: actions/cache@v4
      #   id: npm-cache
      #   with:
      #     path: ~/.npm
      #     key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
      #     restore-keys: |
      #       ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Login to NPM
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |        
          npm install -g npm-cli-login 
          npm-cli-login -u hvc_automation -p ${{ env.GH_PAT_AUTOMATION }} -e sdo016-prod@hanwha.com -r https://npm.pkg.github.com

      - name: Install specific npm version
        run: npm install -g npm@10.7.0

      - name: Verify npm version
        run: npm --version

      - name: Install dependencies
        if: inputs.target_branch != 'production' && steps.npm-cache.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm install

      - name: Build
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm run build
          echo "================"
          ls -al apps/*/src

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.GH_OIDC_ROLE }}
          role-session-name: GitHub-Actions-Assume
          aws-region: ${{ needs.init.outputs.region }}

      - name: Zip build output
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          zip -qry deploy.zip .

      - name: Push build artifact to S3 Bucket
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.init.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          # test block 
          if [ ${{inputs.release_env}} == 'test_sm' ]; then
          aws s3 cp ./deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/authZ/deploy.zip --only-show-errors 
          fi

          # # Upload build artifact to S3 bucket and This command triggers the dev CodePipeline.
          # if [ ${{ inputs.target_branch }}  == "production" ]; then
          #   echo "production upload"
          #   aws s3 cp s3://vcm021-cicd-q-ue1/authZ/deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/authZ/deploy.zip --only-show-errors 
          #   # aws s3 cp s3://sm018-hotfix-cicd-d-an2/backend/deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/authZ/deploy.zip --only-show-errors 
          # else
          #   aws s3 cp ./deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/authZ/deploy.zip --only-show-errors 
          # fi
          
          aws sts get-caller-identity
