name: SightMind Backend Deploy
run-name: SightMind Backend Deploy - ${{ inputs.release_env }}

permissions: write-all

on:
  workflow_call:
    inputs:
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      backend_repo:
        description: 'backend Repo'
        required: true
        default: ""
        type: string
      target_branch:
          description: 'Target Branch'
          required: true
          default: ""
          type: string
      target_version:
          description: 'Target Version'
          required: false
          default: ""
          type: string

env:
  CODEFREEZE: ${{ secrets.CODEFREEZE }}
  GH_PAT_AUTOMATION: ${{ secrets.GH_PAT_AUTOMATION_SEMANTIC_RELEASE }}

jobs:     
  build-and-deploy-to-s3:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ inputs.backend_repo }}
          ref: refs/heads/${{ inputs.target_branch}}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      # --- Python 3.12 설치 (deadsnakes PPA 사용)
      - name: Install Python 3.12 & build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository -y ppa:deadsnakes/ppa
          sudo apt-get update
          sudo apt-get install -y python3.12 python3.12-dev python3.12-venv python3-pip \
                                  build-essential gcc g++ git
          python3.12 -m pip install --upgrade pip

      # --- Poetry 설치
      - name: Install Poetry
        run: |
          python3.12 -m pip install --upgrade pip
          python3.12 -m pip install poetry

      # --- Poetry 환경 생성 및 의존성 설치
      - name: Install dependencies
        run: |
          poetry config virtualenvs.in-project true
          poetry env use python3.12
          poetry install --no-root --no-interaction
          poetry run pip install numpy==2.3.0

      # --- AWS 자격 증명 구성
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::619071312308:role/role-wc025-prod-github-ci
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1

      # --- 빌드 아티팩트 생성
      - name: Package artifact
        run: |
          tar --zstd -cpf - .venv | aws s3 cp - s3://cf-templates-1mi1dpu8pr165-us-east-1/venv/${{ inputs.release_version }}/venv.tar.zst 
      - name: Copy source files to S3
        run: |
          aws s3 sync . s3://cf-templates-1mi1dpu8pr165-us-east-1/src/${{ inputs.release_version }}/ \
            --delete \
            --exact-timestamps \
            --exclude ".git/*" \
            --exclude ".github/*" \
            --exclude ".python-version" \
            --exclude "Jenkinsfile*" \
            --exclude "README.md" \
            --exclude "appspec.yml" \
            --exclude "codedeploy/*" \
            --exclude ".venv/*" 
  make-zip-file:
    runs-on: ubuntu-latest
    needs: build-and-deploy-to-s3
    steps:
      - uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ inputs.backend_repo }}
          ref: refs/heads/${{ inputs.target_branch}}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::619071312308:role/role-wc025-prod-github-ci
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1
      - name: zip file 
        run: |
          sync_script="aws s3 sync s3://cf-templates-1mi1dpu8pr165-us-east-1/src/${{ inputs.release_version }}/ ."
          cp_script="aws s3 cp s3://cf-templates-1mi1dpu8pr165-us-east-1/venv/${{ inputs.release_version }}/venv.tar.zst - | tar --zstd --strip-components=1 -xpf -"
          sed -i "/^aws s3 cp/ s|.*|${cp_script}|" ./codedeploy/deploy.sh
          sed -i "/^aws s3 sync/ s|.*|${sync_script}|" ./codedeploy/deploy.sh
          cat ./codedeploy/deploy.sh
          zip -r oncloud-wiseai-service.zip appspec.yml codedeploy
          aws s3 cp oncloud-wiseai-service.zip s3://cf-templates-1mi1dpu8pr165-us-east-1/wiseai-service/oncloud-wiseai-service.zip --metadata version=${{ inputs.release_version }}