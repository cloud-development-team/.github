name: Build and Push container image to aws ecr using dockerfile

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from deployment"
        value: ${{ jobs.create-tag.outputs.version }}
    inputs:
      image_name:
        required: true
        description: "Name of docker registry to publish. Does not need ghcr.io/cloud-development-team/ in front."
        type: string
      dockerfile_name:
        required: false
        description: "dockerfile's name if it's different than the conventional name"
        type: string
        default: "Dockerfile"
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      ecr_region:
        required: true
        description: "AWS region to upload container image to ECR"
        type: string
      ecr_repository:
        required: true
        description: "Name of ECR repository"
        type: string
      image_tag:
        required: false
        description: "Additional tag for cretead image"
        type: string
      environment:
        description: "Environment name for tagging"
        type: string
        default: "dev"
    secrets:
      GH_USERNAME:
        required: true
      GH_MANAGEPACKAGE_TOKEN:
        required: true
      CODEFREEZE:
        required: true
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  create-tag:
    outputs:
      version: ${{ steps.version.outputs.version }}
      datetime: ${{ steps.datetime.outputs.datetime }}
      sha_short: ${{ steps.sha_short.outputs.sha_short }}
    name: Create tag for new image
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Version
        id: version
        run: |
          if [[ "${{ inputs.image_tag }}" != '' ]]; then
            echo "version=${{ inputs.image_tag }}" >> $GITHUB_OUTPUT
          else
            echo "version=dev-$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_OUTPUT
          fi

      - name: Datetime
        id: datetime
        run: echo "datetime=$(date +'%Y%m%dT%H%M%S')" >> $GITHUB_OUTPUT

      - name: SHA short
        id: sha_short
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

      - name: Result
        run: |
          echo "version=${{ steps.version.outputs.version }}"
          echo "datetime=${{ steps.datetime.outputs.datetime }}"
          echo "sha_short=${{ steps.sha_short.outputs.sha_short }}"

  build-and-push-ecr:
    name: Container image build and push to ecr
    runs-on: ubuntu-latest
    needs: create-tag
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: ${{ inputs.ecr_region }}
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Push image to ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ needs.create-tag.outputs.sha_short }}, ${{ needs.create-tag.outputs.version }}
        run: |
          # Assume Role to ado016-prod account
          export $(printf "AWS_ACCESS_KEY_ID=%s AWS_SECRET_ACCESS_KEY=%s AWS_SESSION_TOKEN=%s" \
          $(aws sts assume-role \
          --role-arn arn:aws:iam::184738677759:role/AWSControlTowerExecution \
          --role-session-name GitHubPipeline \
          --query "Credentials.[AccessKeyId,SecretAccessKey,SessionToken]" \
          --output text))

          # Check who am I
          aws sts get-caller-identity

          # Login to ECR
          ECR_REGISTRY=`aws ecr describe-registry --region ${{ inputs.ecr_region }} | jq ".registryId" | sed 's/\"//g'`.dkr.ecr.${{ inputs.ecr_region }}.amazonaws.com
          aws ecr get-login-password --region ${{ inputs.ecr_region }} | docker login -u AWS --password-stdin $ECR_REGISTRY

          # Docker Build
          IFS=', ' read -r -a tags <<< "$IMAGE_TAG"
          for tag in "${tags[@]}"; do
            docker build -t $ECR_REGISTRY/${{ inputs.ecr_repository }}:$tag -f ${{ inputs.working_dir }}/${{ inputs.dockerfile_name }} .
            docker push $ECR_REGISTRY/${{ inputs.ecr_repository }}:$tag
          done
          docker images
