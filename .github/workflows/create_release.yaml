name: Release Jira Version

run-name: 'create_release: ${{ inputs.jira_key }}-${{ inputs.release_version }} by ${{ github.event.sender.login }}'

on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira Project Key'
        required: true
        default: 'KDOG'
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string

jobs:
  initial_setting:
    outputs:
      repo: ${{ steps.set_env.outputs.repo }}
      branch: ${{ steps.set_env.outputs.branch }}
      backend_repo: ${{ steps.set_env.outputs.backend_repo }}
      frontend_repo: ${{ steps.set_env.outputs.frontend_repo }}
      test_repo: ${{ steps.set_env.outputs.test_repo }}
      release_env: ${{ steps.set_env.outputs.release_env }}
      release_version: ${{ steps.set_env.outputs.release_version }}
      release_branch: ${{ steps.set_env.outputs.release_branch }}
      project: ${{ steps.set_env.outputs.project }}
      
    name: Initial Setting
    runs-on: ubuntu-latest
    steps:
      - name: Repository List
        id: set_env
        run: |
          if [ ${{ inputs.jira_key }}  == "RMR" ]; then
            if grep -q "sh_gw" <<<"${{ inputs.release_version }}"; then
              repo=saasportal-cicd-test
              branch=release
            elif grep -q "sh_be" <<<"${{ inputs.release_version }}"; then
              repo=saleshub-backend
              branch=release
            elif grep -q "sh_fe" <<<"${{ inputs.release_version }}"; then
              repo=saleshub-frontend
              branch=release
            elif grep -q "sh_li" <<<"${{ inputs.release_version }}"; then
              repo=license-server
              branch=release
            fi
          #elif [ ${{ inputs.jira_key }}  == "CPD" ]; then
          elif [ ${{ inputs.jira_key }}  == "KDOG" ] && [ ${{inputs.release_env}} != "test_sm" ]; then
            repo=dmpro-gitops
            branch=main
          elif [ "${{ inputs.jira_key }}" == "KDOG" ] && [ "${{ inputs.release_env }}" == "test_sm" ]; then
            backend_repo=sightmind-backend-mono
            frontend_repo=hc-frontend-mono
            test_repo=sightmind_jira_test
            project=sm

            echo "backend_repo=$backend_repo" >> $GITHUB_OUTPUT
            echo "frontend_repo=$frontend_repo" >> $GITHUB_OUTPUT
            echo "test_repo=$test_repo" >> $GITHUB_OUTPUT
          fi

          if [ "${{ inputs.release_env }}"  == "QA" ]; then
            release_branch=release
          elif [ "${{ inputs.release_env }}" == "PROD" ]; then
            release_branch=production  
          elif [ "${{ inputs.release_env }}" == *"hotfix/"* ]; then
            release_branch=production
          elif [ "${{ inputs.release_env }}" == "test_sm" ]; then
            release_branch=test
          else
            release_branch=null
          fi
          
          echo "repo=$repo" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT
          echo "release_env=$release_env" >> $GITHUB_OUTPUT
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          echo "project=$project" >> $GITHUB_OUTPUT

      - name: Fail if environment is unknown
        if: ${{ steps.set_env.outputs.release_env == null }}
        run: |
          echo "Environment is not QA, PROD, or HOTFIX. Failing the workflow."
          exit 1

  create-github-release:
    name: Create release
    if: ${{ inputs.jira_key }}  != "IS360"
    needs: [initial_setting]
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        if: ${{ inputs.release_env == 'QA' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ needs.initial_setting.outputs.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.branch }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Create Github Release
        if: ${{ inputs.release_env == 'QA' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ needs.initial_setting.outputs.repo }}
          commitish: ${{ needs.initial_setting.outputs.branch }}
          body: |
            ü§ñ This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. üîç
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. üìû
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        if: ${{ inputs.release_env == 'QA' }}
        run: |
          echo "üîç Check the release results"
          echo "üîó Github Release Link : https://github.com/cloud-development-team/${{ needs.initial_setting.outputs.repo }}/releases/tag/${{ inputs.release_version }}"

  create-release-and-trigger-deployment:
    name: create release and trigger deployment
    if: ${{ inputs.jira_key }}  == "IS360"
    needs: [initial_setting]
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          # - repo: ${{ needs.initial_setting.outputs.backend_repo }}
          # - repo: ${{ needs.initial_setting.outputs.frontend_repo }}
          - repo: ${{ needs.initial_setting.outputs.test_repo }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ matrix.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.release_branch }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Trigger Project Workflow
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}" \
          https://api.github.com/repos/cloud-development-team/${{ matrix.repo }}/dispatches \
          -d '{"event_type":"${{ needs.initial_setting.outputs.project}}_jira_release","client_payload":{"release_version":"${{ needs.initial_setting.outputs.release_version }}", "release_env":"${{ needs.initial_setting.outputs.release_env }}"}}'

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ matrix.repo }}
          commitish: ${{ needs.initial_setting.outputs.release_branch }}
          body: |
            ü§ñ This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. üîç
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. üìû
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "üîç Check the release results"
          echo "üîó Github Release Link : https://github.com/cloud-development-team/${{ matrix.repo }}/releases/tag/${{ inputs.release_version }}"

  sp012-gateway:
    if: ${{ inputs.jira_key == 'RMR' }}
    needs: [initial_setting, create-github-release]
    name: Gateway Deploy
    uses: ./.github/workflows/build-and-push-to-s3-sp012.yaml
    with:
      working_dir: ./
      release_version: ${{ inputs.release_version }}
      release_env: ${{ inputs.release_env }}
      release_repo: ${{ needs.initial_setting.outputs.repo }}
      qa_s3_bucket: sp012-build-q-ue1
      prod_s3_bucket: sp012-build-p-ue1
      dev_s3_bucket: sp012-build-d-an2-001
      qa_aws_account: '060636281042'
      prod_aws_account: '497796310523'
      dev_aws_account: '540528117317'
      s3_prefix: gateway-test
    secrets: inherit   
    
  dmpro:
    if: ${{ inputs.jira_key  == 'KDOG' }} 
    needs: [initial_setting, create-github-release]
    name: DMPro Deploy
    uses: ./.github/workflows/deploy-dmpro.yaml
    with:
      release_version: ${{ inputs.release_version }}
      release_env: ${{ inputs.release_env }}
      release_repo: ${{ needs.initial_setting.outputs.repo }}
    secrets: inherit  
