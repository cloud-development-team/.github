name: Create Github Release

run-name: ${{ github.event.sender.login }} executes 'create_release' action for ${{ inputs.jira_key }}

on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira Project Key'
        required: true
        default: 'KDOG'
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release Environment'
        required: false
        default: ""
        type: string

jobs:
  initial_setting:
    outputs:
      repo: ${{ steps.set_env.outputs.repo }}
      backend_repo: ${{ steps.set_env.outputs.backend_repo }}
      frontend_repo: ${{ steps.set_env.outputs.frontend_repo }}
      global_release_branch: ${{ steps.set_env.outputs.global_release_branch }}
      release_branch: ${{ steps.set_env.outputs.release_branch }}
      release_env: ${{ steps.set_env.outputs.release_env }}
      release_version: ${{ steps.set_env.outputs.release_version }}
      project: ${{ steps.set_env.outputs.project }}
    name: Initial Setting
    runs-on: ubuntu-latest
    steps:
      - name: Repository List
        id: set_env
        run: |
          if [ ${{ inputs.jira_key }}  == "CPD" ]; then
            repo=("dmpro-gitops-prod")
            repo=`jq --compact-output --null-input '$ARGS.positional' --args -- "${repo[@]}"`
          elif [ ${{ inputs.jira_key }}  == "IS360" ]; then
            repo=("global-infra-version")
            repo=`jq --compact-output --null-input '$ARGS.positional' --args -- "${repo[@]}"`
            backend_repo="sightmind-backend-mono"
            Frontend-repo="hc-frontend-mono"
            project="sm"
          elif [ ${{ inputs.jira_key }} == "KDOG" ]; then
            repo=("global-infra-version")
            repo=`jq --compact-output --null-input '$ARGS.positional' --args -- "${repo[@]}"`
          fi

          if [ ${{ inputs.release_env }}  == "QA" ]; then
            release_branch=release  
          else
            release_branch=production
          fi

          global_release_branch=main
          release_env="${{ inputs.release_env }}"
          release_version="${{ inputs.release_version }}"
          
          echo "Repository  : $REPO\nBranch      : $REPO1"
          echo "repo=$repo" >> $GITHUB_OUTPUT
          echo "global_release_branch=$global_release_branch" >> $GITHUB_OUTPUT
          echo "release_branch=$release_branch" >> $GITHUB_OUTPUT
          echo "release_env=$release_env" >> $GITHUB_OUTPUT
          echo "release_version=$release_version" >> $GITHUB_OUTPUT
          echo "project=$project" >> $GITHUB_OUTPUT

      - name: Fail if environment is unknown
        if: ${{ steps.set_env.outputs.release_env != 'QA' && steps.set_env.outputs.release_env != 'PROD' && !contains(steps.set_env.outputs.release_env, 'hotfix/') }}
        run: |
          echo "Environment is not QA, PROD, or HOTFIX. Failing the workflow."
          exit 1

  trigger-deployment:
    name: trigger deployment
    needs: [initial_setting]
    environment: ${{ github.ref_name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - repo: ${{ needs.initial_setting.outputs.backend_repo }}
          - repo: ${{ needs.initial_setting.outputs.frontend_repo }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ matrix.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.global_release_branch }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Trigger Project Workflow
        run: |
          curl -X POST -H "Accept: application/vnd.github.v3+json" \
          -H "Authorization: token ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}" \
          https://api.github.com/repos/cloud-development-team/${{ matrix.repo }}/dispatches \
          -d '{"event_type":"${{ needs.initial_setting.outputs.project}}_jira_release","client_payload":{"release_version":"${{ needs.initial_setting.outputs.release_version }}", "release_env":"${{ needs.initial_setting.outputs.release_env }}"}}'

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ matrix.repo }}
          commitish: ${{ needs.initial_setting.outputs.global_release_branch }}
          body: |
            ü§ñ This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. üîç
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. üìû
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "üîç Check the release results"
          echo "üîó Github Release Link : https://github.com/cloud-development-team/${{ matrix.repo }}/releases/tag/${{ inputs.release_version }}"