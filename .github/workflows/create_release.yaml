name: Release Jira Version

run-name: 'create_release: ${{ inputs.jira_key }}-${{ inputs.release_version }} by ${{ github.event.sender.login }}'

on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira Project Key'
        required: true
        default: 'KDOG'
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string

jobs:
  initial_setting:
    if: github.actor == 'jenkins-se'
    outputs:
      repo: ${{ steps.set_env.outputs.repo }}
      branch: ${{ steps.set_env.outputs.branch }}
      backend_repo: ${{ steps.set_env.outputs.backend_repo }}
      frontend_repo: ${{ steps.set_env.outputs.frontend_repo }}
      auth_repo: ${{ steps.set_env.outputs.auth_repo }}
      release_env: ${{ steps.set_env.outputs.release_env }}
      release_version: ${{ steps.set_env.outputs.release_version }}
      target_branch: ${{ steps.set_env.outputs.target_branch }}
      project: ${{ steps.set_env.outputs.project }}
      matrix: ${{ steps.set_env.outputs.matrix }}
      
    name: Initial Setting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Repository List
        id: set_env
        run: |
          #elif [ ${{ inputs.jira_key }}  == "CPD" ]; then
          elif [ ${{ inputs.jira_key }}  == "KDOG" ]; then
            repo=dmpro-gitops
            branch=main
          elif [ "${{ inputs.jira_key }}" == "IS360" ]; then
            backend_repo=sightmind-backend-mono
            frontend_repo=hc-frontend-mono
            auth_repo=hvcp-authorization
            matrix=$(jq -c '.' .github/workflows/files/matrix-sightmind-target-repo.json)

            project=sm

            echo "backend_repo=$backend_repo" >> $GITHUB_OUTPUT
            echo "frontend_repo=$frontend_repo" >> $GITHUB_OUTPUT
            echo "auth_repo=$auth_repo" >> $GITHUB_OUTPUT
            echo "matrix=$matrix" >> $GITHUB_OUTPUT
          fi

          if [ "${{ inputs.release_env }}"  == "QA" ]; then
            target_branch=release
          elif [ "${{ inputs.release_env }}" == "PROD" ]; then
            target_branch=production  
          elif [ "${{ inputs.release_env }}" == *"hotfix/"* ]; then
            target_branch=production
          elif [ "${{ inputs.release_env }}" == "test_sm" ]; then
            target_branch=main
          else
            target_branch=null
          fi
          
          echo "repo=$repo" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "target_branch=$target_branch" >> $GITHUB_OUTPUT
          echo "release_env=${{ inputs.release_env }}" >> $GITHUB_OUTPUT
          echo "release_version=${{ inputs.release_version }}" >> $GITHUB_OUTPUT
          echo "project=$project" >> $GITHUB_OUTPUT

      - name: Fail if environment is unknown
        if: ${{ steps.set_env.outputs.release_env == null }}
        run: |
          echo "Environment is not QA, PROD, or HOTFIX. Failing the workflow."
          exit 1

  create-github-release:
    name: Create release
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key != 'IS360'}} 
    needs: [initial_setting]
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        if: ${{ inputs.release_env == 'QA' }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ needs.initial_setting.outputs.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.branch }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Create Github Release
        if: ${{ inputs.release_env == 'QA' }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ needs.initial_setting.outputs.repo }}
          commitish: ${{ needs.initial_setting.outputs.branch }}
          body: |
            ü§ñ This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. üîç
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. üìû
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        if: ${{ inputs.release_env == 'QA' }}
        run: |
          echo "üîç Check the release results"
          echo "üîó Github Release Link : https://github.com/cloud-development-team/${{ needs.initial_setting.outputs.repo }}/releases/tag/${{ inputs.release_version }}"

  parallel-create-release:
    name: parallel create release
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' }} 
    needs: [initial_setting]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.initial_setting.outputs.matrix) }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ matrix.repo }}
          ref: refs/heads/${{ needs.initial_setting.outputs.target_branch }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{needs.initial_setting.outputs.project}}${{ inputs.release_version }}
          release_name: ${{needs.initial_setting.outputs.project}}${{ inputs.release_version }}
          repo: ${{ matrix.repo }}
          commitish: ${{ needs.initial_setting.outputs.target_branch }}
          body: |
            ü§ñ This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. üîç
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. üìû
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "üîç Check the release results"
          echo "üîó Github Release Link : https://github.com/cloud-development-team/${{ matrix.repo }}/releases/tag/${{ inputs.release_version }}" 
    
  dmpro:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key  == 'KDOG' }} 
    needs: [initial_setting, create-github-release]
    name: DMPro Deploy
    uses: ./.github/workflows/deploy-dmpro.yaml
    with:
      release_version: ${{ inputs.release_version }}
      release_env: ${{ inputs.release_env }}
      release_repo: ${{ needs.initial_setting.outputs.repo }}
    secrets: inherit  

  sightmind-backend:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' }} 
    needs: [initial_setting, parallel-create-release]
    name: SightMind Backend Deploy
    uses: ./.github/workflows/deploy-sightmind-backend.yaml
    with:
      release_env: ${{ inputs.release_env }}
      backend_repo: ${{ needs.initial_setting.outputs.backend_repo }}
      target_branch: ${{ needs.initial_setting.outputs.target_branch }}
      release_version: ${{ needs.initial_setting.outputs.release_version }}
    secrets: inherit  

  sightmind-fronted:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' && inputs.release_env == 'test_sm' }} 
    needs: [initial_setting, parallel-create-release]
    name: SightMind Frontend Deploy
    uses: ./.github/workflows/deploy-sightmind-frontend.yaml
    with:
      release_env: ${{ inputs.release_env }}
      frontend_repo: ${{ needs.initial_setting.outputs.frontend_repo }}
      target_branch: ${{ needs.initial_setting.outputs.target_branch }}
      release_version: ${{ needs.initial_setting.outputs.release_version }}
    secrets: inherit  

  # auth-backend:
  #   if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' && inputs.release_env == 'test_sm' }} 
  #   needs: [initial_setting, parallel-create-release]
  #   name: AuthZ Backend Deploy
  #   uses: ./.github/workflows/deploy-authZ-backend.yaml
  #   with:
  #     release_env: ${{ inputs.release_env }}
  #     backend_repo: ${{ needs.initial_setting.outputs.auth_repo }}
  #     target_branch: ${{ needs.initial_setting.outputs.target_branch }}
  #     release_version: ${{ needs.initial_setting.outputs.release_version }}
  #   secrets: inherit  
