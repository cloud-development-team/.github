name: Release Jira Version

run-name: 'create_release: ${{ inputs.jira_key }}-${{ inputs.release_version }} by ${{ github.event.sender.login }}'

on:
  workflow_dispatch:
    inputs:
      jira_key:
        description: 'Jira Project Key'
        required: true
        default: 'KDOG'
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string

jobs:
  initial_setting:
    if: github.actor == 'jenkins-se'
    outputs:
      dm_be_repo: ${{ steps.set_env.outputs.dm_be_repo }}
      dm_lambda_repo: ${{ steps.set_env.outputs.dm_lambda_repo }}
      dm_sw_ver: ${{ steps.set_env.outputs.dm_sw_ver }}
      backend_repo: ${{ steps.set_env.outputs.backend_repo }}
      frontend_repo: ${{ steps.set_env.outputs.frontend_repo }}
      auth_repo: ${{ steps.set_env.outputs.auth_repo }}
      release_env: ${{ steps.set_env.outputs.release_env }}
      release_version: ${{ steps.set_env.outputs.release_version }}
      target_branch: ${{ steps.set_env.outputs.target_branch }}
      target_version: ${{ steps.set_env.outputs.target_version }}
      project: ${{ steps.set_env.outputs.project }}
      matrix: ${{ steps.set_env.outputs.matrix }}
      
    name: Initial Setting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4

      - name: Repository List
        id: set_env
        run: |
          if [ "${{ inputs.jira_key }}" == "CPD" ]; then
            dm_be_repo=dmpro-gitops
            dm_lambda_repo=dmpro-agent-scheduler
            
            if grep -q "MINOR" <<< "${{ inputs.release_env }}"; then
                dm_sw_ver="minor"
            elif grep -q "BOTH" <<< "${{ inputs.release_env }}"; then
                dm_sw_ver="both"
            else
                dm_sw_ver="major"
            fi

            echo "set env dmpro"
            echo "dm_be_repo=$dm_be_repo" >> $GITHUB_OUTPUT
            echo "dm_lambda_repo=$dm_lambda_repo" >> $GITHUB_OUTPUT
            echo "dm_sw_ver=$dm_sw_ver" >> $GITHUB_OUTPUT

          elif [ "${{ inputs.jira_key }}" == "IS360" ]; then
            echo "set env sightmind"
            backend_repo=sightmind-backend-mono
            frontend_repo=hc-frontend-mono
            auth_repo=hvcp-authorization
            matrix=$(jq -c '.' .github/workflows/files/matrix-sightmind-target-repo.json)

            project=sm

            echo "backend_repo=$backend_repo" >> $GITHUB_OUTPUT
            echo "frontend_repo=$frontend_repo" >> $GITHUB_OUTPUT
            echo "auth_repo=$auth_repo" >> $GITHUB_OUTPUT
            echo "matrix=$matrix" >> $GITHUB_OUTPUT

          elif [ "${{ inputs.jira_key }}" == "STARSCREAM" ]; then
            if grep -q "CloudAI" <<<"${{ inputs.release_version }}"; then
              echo "set env for CloudAI"
              cloudai_backend_repo=oncloud-wiseai-service
              project=cloudai
              echo "backend_repo=$cloudai_backend_repo" >> $GITHUB_OUTPUT
            fi
          fi


          if grep -q "QA" <<< "${{ inputs.release_env }}"; then
            target_branch=release
            if grep -q "MINOR" <<< "${{ inputs.release_env }}"; then
              target_version=minor
            elif grep -q "MAJOR" <<< "${{ inputs.release_env }}"; then
              target_version=major
            elif grep -q "BOTH" <<< "${{ inputs.release_env }}"; then
              target_version=both
            fi
          elif grep -q "PROD" <<< "${{ inputs.release_env }}"; then
            target_branch=production
            if grep -q "MINOR" <<< "${{ inputs.release_env }}"; then
              target_version=minor
            elif grep -q "MAJOR" <<< "${{ inputs.release_env }}"; then
              target_version=major
            fi
          elif grep -q "hotfix" <<< "${{ inputs.release_env }}"; then
            target_branch=production
            target_version=hotfix
          else
            target_branch=null
          fi

          if [ "${{ inputs.jira_key }}" == "OPS" ]; then
            if grep -q "CloudAI" <<< "${{ inputs.release_version }}"; then
              echo "set env for CloudAI"
              cloudai_backend_repo=oncloud-wiseai-service
              project=cloudai
              echo "backend_repo=$cloudai_backend_repo" >> $GITHUB_OUTPUT


              if grep -q "PROD" <<< "${{ inputs.release_env }}"; then
                target_branch=production
                target_version=$(echo "${{ inputs.release_version }}" | cut -d ',' -f2)
              elif grep -q "QA" <<< "${{ inputs.release_env }}"; then
                target_branch=release
                target_version=major
              fi
            fi
          fi
          
          echo "repo=$repo" >> $GITHUB_OUTPUT
          echo "branch=$branch" >> $GITHUB_OUTPUT
          echo "target_branch=$target_branch" >> $GITHUB_OUTPUT
          echo "target_version=$target_version" >> $GITHUB_OUTPUT
          echo "release_env=${{ inputs.release_env }}" >> $GITHUB_OUTPUT
          echo "release_version=${{ inputs.release_version }}" >> $GITHUB_OUTPUT
          echo "project=$project" >> $GITHUB_OUTPUT

      - name: Fail if environment is unknown
        if: ${{ steps.set_env.outputs.release_env == null }}
        run: |
          echo "Environment is not QA, PROD, or HOTFIX. Failing the workflow."
          exit 1
    
  dmpro:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'CPD' }}
    needs: [initial_setting]
    name: DMPro Backend Deploy
    uses: ./.github/workflows/deploy-dmpro.yaml
    with:
      release_version: ${{ inputs.release_version }}
      release_env: ${{ inputs.release_env }}
      release_repo: ${{ needs.initial_setting.outputs.dm_be_repo }}
      dm_lambda_repo: ${{ needs.initial_setting.outputs.dm_lambda_repo }}
      dm_sw_ver: ${{ needs.initial_setting.outputs.dm_sw_ver }}
    secrets: inherit  

  sightmind-backend:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' }} 
    needs: [initial_setting]
    name: SightMind Backend Deploy
    uses: ./.github/workflows/deploy-sightmind-backend.yaml
    with:
      release_env: ${{ inputs.release_env }}
      backend_repo: ${{ needs.initial_setting.outputs.backend_repo }}
      target_branch: ${{ needs.initial_setting.outputs.target_branch }}
      release_version: ${{ needs.initial_setting.outputs.release_version }}
      target_version: ${{ needs.initial_setting.outputs.target_version }}
    secrets: inherit  

  sightmind-fronted:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' }} 
    needs: [initial_setting]
    name: SightMind Frontend Deploy
    uses: ./.github/workflows/deploy-sightmind-frontend.yaml
    with:
      release_env: ${{ inputs.release_env }}
      frontend_repo: ${{ needs.initial_setting.outputs.frontend_repo }}
      target_branch: ${{ needs.initial_setting.outputs.target_branch }}
      release_version: ${{ needs.initial_setting.outputs.release_version }}
      target_version: ${{ needs.initial_setting.outputs.target_version }}
    secrets: inherit  
  
  cloudai:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'STARSCREAM' }}
    needs: [initial_setting]
    name: CloudAI Backend Deploy
    uses: ./.github/workflows/deploy-cloudai.yaml
    with:
      release_env: ${{ inputs.release_env }}
      backend_repo: ${{ needs.initial_setting.outputs.backend_repo }}
      target_branch: ${{ needs.initial_setting.outputs.target_branch }}
      release_version: ${{ needs.initial_setting.outputs.release_version }}
      target_version: ${{ needs.initial_setting.outputs.target_version }}
    secrets: inherit  
  cloudai-test:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'OPS' }}
    needs: [initial_setting]
    name: CloudAI Backend Deploy TEST
    uses: ./.github/workflows/deploy-cloudai.yaml
    with:
      release_env: ${{ inputs.release_env }}
      backend_repo: ${{ needs.initial_setting.outputs.backend_repo }}
      target_branch: ${{ needs.initial_setting.outputs.target_branch }}
      release_version: ${{ needs.initial_setting.outputs.release_version }}
      target_version: ${{ needs.initial_setting.outputs.target_version }}
    secrets: inherit  

  auth-backend:
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' }} 
    needs: [initial_setting]
    name: AuthZ Backend Deploy
    uses: ./.github/workflows/deploy-authZ-backend.yaml
    with:
      release_env: ${{ inputs.release_env }}
      backend_repo: ${{ needs.initial_setting.outputs.auth_repo }}
      target_branch: ${{ needs.initial_setting.outputs.target_branch }}
      release_version: ${{ needs.initial_setting.outputs.release_version }}
      target_version: ${{ needs.initial_setting.outputs.target_version }}
    secrets: inherit  

  create-github-release:
    name: Create GitOps Github Release
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key != 'IS360'}} 
    needs: [initial_setting , dmpro]
    environment: main
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ needs.initial_setting.outputs.dm_be_repo }}
          ref: refs/heads/main
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ inputs.release_version }}
          release_name: ${{ inputs.release_version }}
          repo: ${{ needs.initial_setting.outputs.dm_be_repo }}
          commitish: main
          body: |
            🤖 This release was created by ${{ github.event.sender.login }}.
            - Released By JIRA 🔍
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "🔍 Check the release results"
          echo "🔗 Github Release Link : https://github.com/cloud-development-team/${{ needs.initial_setting.outputs.dm_be_repo }}/releases/tag/${{ inputs.release_version }}"

  parallel-create-release:
    name: parallel create release
    if: ${{ github.actor == 'jenkins-se' && inputs.jira_key == 'IS360' }} 
    needs: [initial_setting, sightmind-backend, sightmind-fronted, auth-backend]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.initial_setting.outputs.matrix) }}
        
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: cloud-development-team/${{ matrix.repo }}
          ref: refs/heads/release
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Create Github Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{needs.initial_setting.outputs.project}}${{ inputs.release_version }}
          release_name: ${{needs.initial_setting.outputs.project}}${{ inputs.release_version }}
          repo: ${{ matrix.repo }}
          commitish: release
          body: |
            🤖 This release was created by ${{ github.event.sender.login }}.
            - More information about this release can be found in Jira Release. 🔍
            - Jira Release should have a release like this version. If the same version is not there, contact DevOps. 📞
            - [Jira Release Link](https://hanwhavision.atlassian.net/projects/${{ inputs.jira_key }}?selectedItem=com.atlassian.jira.jira-projects-plugin%3Arelease-page)

      - name: Github Release Result
        run: |
          echo "🔍 Check the release results"
          echo "🔗 Github Release Link : https://github.com/cloud-development-team/${{ matrix.repo }}/releases/tag/${{ inputs.release_version }}" 
