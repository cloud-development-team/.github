name: Build pnpm and Deploy to S3 and invalidate CloudFront

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from semver"
        value: ${{ jobs.pnpm-build.outputs.version }}
      tags:
        description: "All image tags"
        value: ${{ jobs.node-build.outputs.tags }}
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      node_versions:
        required: false
        description: "List of node version which want to scan"
        type: string
        default: "['20.11.1']"

    secrets:
      CODEFREEZE:
        required: true

env:
  CODEFREEZE: ${{ secrets.CODEFREEZE }}
  AUTOMATION_GH_USERNAME: ${{ vars.AUTOMATION_GH_USERNAME }}
  GH_PAT_AUTOMATION: ${{ secrets.GH_PAT_AUTOMATION_SEMANTIC_RELEASE }} #${{ secrets.GH_PAT_AUTOMATION }}


jobs:
  initial-tasks: 
    name: Initial tasks
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }} 
    outputs:
      env: ${{ github.ref_name }}
      region: ${{ vars.REGION }}
      s3_bucket: ${{ vars.S3_BUCKET }}
      s3_account: ${{ vars.S3_ACCOUNT }}
      cloudfront_distribution_id: ${{ vars.CF_DISTRIBUTION_ID }}
      production_version: ${{ vars.PRODUCTION_VERSION }}          
    steps:
      - name: Get environment
        id: get_env
        run: echo "env=${GITHUB_BASE_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT

  pnpm-build:
    name: Run pnpm build and release to S3 and invalidate CloudFront
    runs-on: ubuntu-latest
    needs: [initial-tasks]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}
        # node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        if: github.ref_name != 'production'
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        if: github.ref_name != 'production'
        uses: pnpm/action-setup@v2
        with:
          version: 9.0.5

      - name: Caching pnpm
        if: github.ref_name != 'production'
        uses: actions/cache@v3
        with:
          id: pnpm-cache
          path: ./node_modules
          key: ${{ needs.initial-tasks.outputs.env }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('./pnpm-lock.yaml') }}

      - name: Login to NPM
        if: github.ref_name != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm install -g npm-cli-login 
          npm-cli-login -u hvc_automation -p ${{ env.GH_PAT_AUTOMATION }} -e sdo016-prod@hanwha.com -r https://npm.pkg.github.com -s @backend-sw-development-team4 

      - name: Install dependencies
        if: github.ref_name != 'production' && steps.pnpm-cache.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working_dir }}
        run: pnpm install

      - name: Build
        if: github.ref_name != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          # CI=false pnpm build:dev

          if [ ${{ needs.initial-tasks.outputs.env }}  == "main" ]; then
            echo "build dev environment"
            CI=false pnpm build:dev
          elif [ ${{ needs.initial-tasks.outputs.env }}  == "release" ]; then
            echo "build qa environment"
            CI=false pnpm build:qa
          else
            echo "build dev environment"
            CI=false pnpm build:dev
          fi

      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_AUTOMATION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_AUTOMATION }}
          aws-region: ${{ needs.initial-tasks.outputs.region }}

      - name: Push build artifact to S3 Bucket and invalidation CloudFront
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.initial-tasks.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          
          # Upload build artifact to S3 bucket and This command triggers the dev CodePipeline.
          if [ ${{ needs.initial-tasks.outputs.env }}  == "production" ]; then
          # aws s3 sync s3://sm018-static-q-ue1/hotfix/build s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ needs.initial-tasks.outputs.env }}/build --delete --region ${{ needs.initial-tasks.outputs.region }}
            if [ ${{ needs.initial-tasks.outputs.production_version }}  == "major" ]; then
              aws s3 sync s3://sm018-static-q-ue1/release/build/major s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ needs.initial-tasks.outputs.env }}/build --delete --region ${{ needs.initial-tasks.outputs.region }}
            else
              aws s3 sync s3://sm018-static-q-ue1/release/build/minor s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ needs.initial-tasks.outputs.env }}/build --delete --region ${{ needs.initial-tasks.outputs.region }}
            fi
          else
            if [ ${{ inputs.working_dir }}  == "./apps/sightmind" ]; then
              aws s3 sync ./build s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ needs.initial-tasks.outputs.env }}/build/major --delete --region ${{ needs.initial-tasks.outputs.region }}
            else
              aws s3 sync ./build s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ needs.initial-tasks.outputs.env }}/build/minor --delete --region ${{ needs.initial-tasks.outputs.region }}
            fi
          fi

          # Setting CloudFront
          aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} --paths "/*"

  versioning:
    if: ${{ github.ref_name == 'release' }}
    outputs:
      version: ${{ steps.version.outputs.version }}
      previous_version: ${{ steps.version.outputs.previous_version }}
    name: Semantic Versioning
    needs: [pnpm-build]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Semantic Version
        id: version
        uses: paulhatch/semantic-version@v5.1.0
        with:
          major_pattern: "(MAJOR)"
          minor_pattern: "(MINOR)"
          version_format: "sm${major}.${minor}.${patch}"
          tag_prefix: "sm"
          bump_each_commit: false
          search_commit_body: true
  
  release-gitops:
    if: ${{ github.ref_name == 'release' }}
    name: GitOps Release
    needs: [versioning]
    uses: cloud-development-team/.github/.github/workflows/gitops-ver-release.yaml@main
    with:
      repository_name: "cloud-development-team/global-infra-version"
      build_ver: ${{ needs.versioning.outputs.version }}
      application_name: "sightmind-hc-frontend-mono"
    secrets: inherit

  create-release:
    if: ${{ github.ref_name == 'release' }}
    name: GitHub Release
    needs: [versioning, release-gitops]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
        with:
          tag_name: ${{ needs.versioning.outputs.version }}
          name: ${{ needs.versioning.outputs.version }}
          body: ${{ steps.release_changelog.outputs.changelog }}

      - name: Build Release Changelog
        id: release_changelog
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          toTag: ${{ needs.versioning.outputs.version }}
          fromTag: sm${{ needs.versioning.outputs.previous_version }}
          configurationJson: |
            {
              "categories": [
                {
                    "title": "## üöÄ Feature",
                    "rules": [
                      {
                        "pattern": "feat",
                        "on_property": "title",
                        "method": "match"
                      }
                    ]
                },
                {
                    "title": "## üêõ Fix",
                    "rules": [
                      {
                        "pattern": "fix",
                        "on_property": "title",
                        "method": "match"
                      }
                    ]
                },
                {
                  "title": "## üì¶ Uncategorized",
                  "rules": [
                    {
                      "pattern": "^(?!.*\\b(feat|fix)\\b).*$",
                      "on_property": "title",
                      "method": "match"
                    }
                  ]
                }
              ]
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Add Changelog Report to Release
        uses: irongut/EditRelease@v1.2.0
        with:
          token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
          id: ${{ steps.create_release.outputs.id }}
          body: ${{ steps.release_changelog.outputs.changelog }}