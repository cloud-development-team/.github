name: SightMind Deploy
run-name: SightMind Deploy - ${{ inputs.release_env }}

permissions: write-all

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from semver"
        value: ${{ jobs.pnpm-build.outputs.version }}
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      node_versions:
        required: false
        description: "List of node version which want to scan"
        type: string
        default: "['20.14.0']" #"['18.16']"
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      frontend_repo:
        description: 'Frontend Repository'
        required: true
        default: ""
        type: string
      backend_repo:
        description: 'Backend Repository'
        required: true
        default: ""
        type: string
      target_branch:
          description: 'Target Branch'
          required: true
          default: ""
          type: string

jobs:
  init:
    runs-on: ubuntu-latest
    environment: sm_${{ inputs.target_branch }}
    
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      s3_bucket: ${{ steps.set_env.outputs.s3_bucket }}
      s3_account: ${{ steps.set_env.outputs.s3_account }}

    steps:
      - name: set env
        id: set_env
        run: |
          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          echo "s3_bucket=${{ vars.S3_BUCKET }}" >> $GITHUB_OUTPUT
          echo "s3_account=${{ vars.S3_ACCOUNT }}" >> $GITHUB_OUTPUT

  pnpm-build:
    name: Run Node Build
    runs-on: ubuntu-latest
    environment: aws
    needs: [init]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}
        # node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        if: inputs.target_branch != 'production'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Cache npm dependencies
        if: inputs.target_branch != 'production'
        uses: actions/cache@v4
        id: npm-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ matrix.node-version }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ matrix.node-version }}-

      - name: Login to NPM
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |        
          npm install -g npm-cli-login 
          npm-cli-login -u hvc_automation -p ${{ env.GH_PAT_AUTOMATION }} -e sdo016-prod@hanwha.com -r https://npm.pkg.github.com

      - name: Install specific npm version
        run: npm install -g npm@10.7.0

      - name: Verify npm version
        run: npm --version

      - name: Install dependencies
        if: inputs.target_branch != 'production' && steps.npm-cache.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm install

      # - name: Build
      #   if: inputs.target_branch != 'production'
      #   working-directory: ${{ inputs.working_dir }}
      #   run: |
      #     npm run build
      #     echo "================"
      #     ls -al apps/*/src

      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     role-to-assume: ${{ vars.GH_OIDC_ROLE }}
      #     role-session-name: GitHub-Actions-Assume
      #     aws-region: ${{ needs.init.outputs.region }}

      # - name: Zip build output
      #   if: inputs.target_branch != 'production'
      #   working-directory: ${{ inputs.working_dir }}
      #   run: |
      #     zip -qry deploy.zip .

      # - name: Push build artifact to S3 Bucket
      #   working-directory: ${{ inputs.working_dir }}
      #   run: |
      #     # Assume Role using an Automation Key
      #     identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.init.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
      #     export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
      #     export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
      #     export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

      #     # Upload build artifact to S3 bucket and This command triggers the dev CodePipeline.
      #     if [ ${{ inputs.target_branch }}  == "production" ]; then
      #       echo "production upload"
      #       aws s3 cp s3://sm018-cicd-q-ue1/backend/deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/backend/deploy.zip --only-show-errors 
      #       # aws s3 cp s3://sm018-hotfix-cicd-d-an2/backend/deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/backend/deploy.zip --only-show-errors 
      #     else
      #       aws s3 cp ./deploy.zip s3://${{ needs.init.outputs.s3_bucket }}/backend/deploy.zip --only-show-errors 
      #     fi
          
      #     aws sts get-caller-identity


  # versioning:
  #   if: ${{ inputs.target_branch == 'release' }}
  #   outputs:
  #     version: ${{ steps.version.outputs.version }}
  #     previous_version: ${{ steps.version.outputs.previous_version }}
  #   name: Semantic Versioning
  #   needs: [pnpm-build]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Semantic Version
  #       id: version
  #       uses: paulhatch/semantic-version@v5.4.0
  #       with:
  #         major_pattern: "(MAJOR)"
  #         minor_pattern: "(MINOR)"
  #         version_format: "sm${major}.${minor}.${patch}"
  #         tag_prefix: "sm"
  #         bump_each_commit: false
  #         search_commit_body: true
  
  # release-gitops:
  #   if: ${{ inputs.target_branch == 'release' }}
  #   name: GitOps Release
  #   needs: [versioning]
  #   uses: cloud-development-team/.github/.github/workflows/gitops-ver-release.yaml@main
  #   with:
  #     repository_name: "cloud-development-team/global-infra-version"
  #     build_ver: ${{ needs.versioning.outputs.version }}
  #     application_name: "sightmind-backend-mono"
  #   secrets: inherit

  # create-release:
  #   if: ${{ inputs.target_branch == 'release' }}
  #   name: GitHub Release
  #   needs: [versioning, release-gitops]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - name: Build Release Changelog
  #       id: release_changelog
  #       uses: mikepenz/release-changelog-builder-action@v4
  #       with:
  #         toTag: ${{ needs.versioning.outputs.version }}
  #         fromTag: sm${{ needs.versioning.outputs.previous_version }}
  #         configurationJson: |
  #           {
  #             "categories": [
  #               {
  #                   "title": "## üöÄ Feature",
  #                   "rules": [
  #                     {
  #                       "pattern": "feat",
  #                       "on_property": "title",
  #                       "method": "match"
  #                     }
  #                   ]
  #               },
  #               {
  #                   "title": "## üêõ Fix",
  #                   "rules": [
  #                     {
  #                       "pattern": "fix",
  #                       "on_property": "title",
  #                       "method": "match"
  #                     }
  #                   ]
  #               },
  #               {
  #                 "title": "## üì¶ Uncategorized",
  #                 "rules": [
  #                   {
  #                     "pattern": "^(?!.*\\b(feat|fix)\\b).*$",
  #                     "on_property": "title",
  #                     "method": "match"
  #                   }
  #                 ]
  #               }
  #             ]
  #           }
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  #     - name: Create Release
  #       id: create_release
  #       uses: softprops/action-gh-release@v2
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
  #       with:
  #         tag_name: ${{ needs.versioning.outputs.version }}
  #         name: ${{ needs.versioning.outputs.version }}
  #         body: ${{ steps.release_changelog.outputs.changelog }}

  #     - name: Add Changelog Report to Release
  #       uses: irongut/EditRelease@v1.2.0
  #       with:
  #         token: ${{ secrets.GH_MANAGEPACKAGE_TOKEN }}
  #         id: ${{ steps.create_release.outputs.id }}
  #         body: ${{ steps.release_changelog.outputs.changelog }}