name: Build with pnpm and Save Artifact to S3

permissions: write-all

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from semver"
        value: ${{ jobs.pnpm-build.outputs.version }}
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      pnpm_versions:
        required: false
        description: "pnpm version which want to use"
        type: number
        default: 8 
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      release_repo:
        description: 'Release Repository'
        required: true
        default: ""
        type: string
      prod_s3_bucket:
        description: 'Prod env S3 Bucket Name'
        required: true
        default: ""
        type: string
      prod_aws_account:
        description: 'Prod AWS Account'
        required: true
        default: ""
        type: string
      qa_s3_bucket:
        description: 'QA env S3 Bucket Name'
        required: false
        default: ""
        type: string
      qa_aws_account:
        description: 'QA AWS Account'
        required: false
        default: ""
        type: string
      s3_prefix:
        description: 'S3 prefix for deploy.zip'
        required: true
        default: ""
        type: string
jobs:
  qa-build-deploy:
    name: QA Build Deploy
    if: ${{ inputs.release_env == 'release' }}
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Checkout current repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          repository: cloud-development-team/${{ inputs.release_repo }}
          ref: ${{ inputs.release_version }}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - name: Install dependencies
        working-directory: ${{ inputs.working_dir }}
        run: |
          pnpm install
      - name: Build
        working-directory: ${{ inputs.working_dir }}
        run: |
          pnpm run build
          echo "================"
          ls -al 
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::619268642609:role/HVC-admin-automation
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1

      - name: Push build artifact to S3 Bucket
        working-directory: ${{ inputs.working_dir }}
        run: |
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ inputs.qa_aws_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          aws s3 cp s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/env . --only-show-errors
          zip -qry deploy.zip .
          aws s3 cp ./deploy.zip s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/deploy.zip --only-show-errors 
  prod-deploy:
    name: Prod Deploy
    if: ${{ inputs.release_env == 'prod' }}
    runs-on: ubuntu-latest
    environment: main
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::619268642609:role/HVC-admin-automation
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1
      - name: Get QA code from S3 Bucket
        working-directory: ${{ inputs.working_dir }}
        run: |
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ inputs.qa_aws_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          aws s3 cp s3://${{ inputs.qa_s3_bucket }}/${{ inputs.s3_prefix }}/deploy.zip . --only-show-errors 
      - name: ReConfigure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::619268642609:role/HVC-admin-automation
          role-session-name: GitHub-Actions-Assume
          aws-region: us-east-1
      - name: Push to S3 Bucket
        run: |
          unzip -oq deploy.zip
          rm env deploy.zip

          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ inputs.prod_aws_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')
          aws s3 cp s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/env . --only-show-errors
          zip -qry deploy.zip .
          aws s3 cp ./deploy.zip s3://${{ inputs.prod_s3_bucket }}/${{ inputs.s3_prefix }}/deploy.zip --only-show-errors
