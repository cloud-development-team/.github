name: Build pnpm and Deploy to S3 and invalidate CloudFront

on:
  workflow_call:
    outputs:
      version:
        description: "Version number from semver"
        value: ${{ jobs.pnpm-build.outputs.version }}
      tags:
        description: "All image tags"
        value: ${{ jobs.node-build.outputs.tags }}
    inputs:
      working_dir:
        required: false
        description: "Operating path for path dependent steps"
        type: string
        default: .
      node_versions:
        required: false
        description: "List of node version which want to scan"
        type: string
        default: "['20.11.1']"
      release_env:
        description: 'Release Environment'
        required: true
        default: ""
        type: string
      release_version:
        description: 'Release Version'
        required: true
        default: ""
        type: string
      frontend_repo:
        description: 'Frontend Repo'
        required: true
        default: ""
        type: string
      target_branch:
        description: 'Target Branch'
        required: true
        default: ""
        type: string
      target_version:
        description: 'Target Version'
        required: false
        default: ""
        type: string
      version:
        required: true
        description: "minor or major version"
        type: string
        default: ""

    secrets:
      CODEFREEZE:
        required: true

env:
  CODEFREEZE: ${{ secrets.CODEFREEZE }}
  GH_PAT_AUTOMATION: ${{ secrets.GH_PAT_AUTOMATION_SEMANTIC_RELEASE }}


jobs:
  initial-tasks: 
    name: Initial tasks
    runs-on: ubuntu-latest
    environment: sm_frontend_${{ inputs.target_branch }} 
    outputs:
      region: ${{ steps.set_env.outputs.region }}
      s3_bucket: ${{ steps.set_env.outputs.s3_bucket }}
      s3_rollback_bucket: ${{ vars.S3_ROLLBACK_BUCKET }}
      s3_account: ${{ steps.set_env.outputs.s3_account }}
      cloudfront_distribution_id: ${{ vars.CF_DISTRIBUTION_ID }}
      cloudfront_distribution_id_minor: ${{ vars.CF_DISTRIBUTION_ID_MINOR }}
      production_version: ${{ vars.SM_FRONTEND_PRODUCTION_VERSION }}
  
    steps:
      - name: set env
        id: set_env
        run: |
          echo "region=${{ vars.REGION }}" >> $GITHUB_OUTPUT
          echo "s3_bucket=${{ vars.S3_BUCKET }}" >> $GITHUB_OUTPUT
          echo "s3_account=${{ vars.S3_ACCOUNT }}" >> $GITHUB_OUTPUT     

  pnpm-build:
    name: Run pnpm build and release to S3 and invalidate CloudFront
    runs-on: ubuntu-latest
    needs: [initial-tasks]
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node_versions) }}
        # node-version: [14.x, 16.x, 18.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        if: inputs.target_branch != 'production'
        with:
          repository: cloud-development-team/${{ inputs.frontend_repo }}
          ref: refs/heads/${{ inputs.target_branch}}
          token: ${{ secrets.AUTOMATION_GH_MANAGEPACKAGE_TOKEN }}

      - name: Setup Node.js
        if: inputs.target_branch != 'production'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: Setup pnpm
        if: inputs.target_branch != 'production'
        uses: pnpm/action-setup@v4
        with:
          version: 9.3.0

      # - name: Caching pnpm
      #   if: inputs.target_branch != 'production'
      #   uses: actions/cache@v4
      #   id: pnpm-cache
      #   with:
      #     path: ./node_modules
      #     key: ${{ inputs.target_branch }}-${{ runner.os }}-node${{ matrix.node-version }}-${{ hashFiles('./pnpm-lock.yaml') }}

      - name: Login to NPM
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          npm install -g npm-cli-login 
          npm-cli-login -u hvc_automation -p ${{ env.GH_PAT_AUTOMATION }} -e sdo016-prod@hanwha.com -r https://npm.pkg.github.com -s @backend-sw-development-team4 

      - name: Install dependencies
        if: inputs.target_branch != 'production' && steps.pnpm-cache.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working_dir }}
        run: pnpm install

      - name: Build
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          # CI=false pnpm build:dev

          if [ ${{ inputs.target_branch }}  == "main" ]; then
            echo "build dev environment"
            CI=false pnpm build:dev
          elif [ ${{ inputs.target_branch }}  == "release" ]; then
            echo "build qa environment"
            CI=false pnpm build:qa
          else
            echo "build dev environment"
            CI=false pnpm build:dev
          fi
      
      - name: Zip build output
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          zip -qry $GITHUB_WORKSPACE/frontend.zip ./build/

          if [ -f "$GITHUB_WORKSPACE/frontend.zip" ]; then
            echo "Zip file created successfully."
          else
            echo "Error: frontend.zip was not created."
            exit 1
          fi

      # Login To HVC_Admin_Automation for Deploy
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_AUTOMATION }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY_AUTOMATION }}
          aws-region: ${{ needs.initial-tasks.outputs.region }}

      - name: Push build artifact to S3 Bucket and invalidation CloudFront
        if: inputs.target_branch != 'production'
        working-directory: ${{ inputs.working_dir }}
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.initial-tasks.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          
          # Upload build artifact to S3 bucket and This command triggers the dev CodePipeline.
          if [ "${{ inputs.version }}" == "major" ]; then
            aws s3 sync ./build s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ inputs.target_branch }}/build/major --delete --region ${{ needs.initial-tasks.outputs.region }}
            aws s3 cp $GITHUB_WORKSPACE/frontend.zip s3://${{ needs.initial-tasks.outputs.s3_rollback_bucket }}/frontend/major/${{ inputs.release_version }}/frontend.zip --region ${{ needs.initial-tasks.outputs.region }}

          elif [ "${{ inputs.version }}" == "minor" ]; then
            aws s3 sync ./build s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ inputs.target_branch }}/build/minor --delete --region ${{ needs.initial-tasks.outputs.region }}
            aws s3 cp $GITHUB_WORKSPACE/frontend.zip s3://${{ needs.initial-tasks.outputs.s3_rollback_bucket }}/frontend/minor/${{ inputs.release_version }}/frontend.zip --region ${{ needs.initial-tasks.outputs.region }}

          fi

          # Setting CloudFront
          if [ "${{ inputs.version }}" == "major" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} --paths "/*"
          elif [ "${{ inputs.version }}" == "minor" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id_minor }} --paths "/*"
          else
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} --paths "/*"
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id_minor }} --paths "/*"
          fi

      - name: Push build artifact to S3 Bucket and invalidation CloudFront
        if: inputs.target_branch == 'production'
        run: |
          # Assume Role using an Automation Key
          identity=$(aws sts assume-role --role-arn arn:aws:iam::${{ needs.initial-tasks.outputs.s3_account }}:role/AWSControlTowerExecution --role-session-name AWS)
          export AWS_ACCESS_KEY_ID=$(echo "$identity" | grep -o '"AccessKeyId": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SECRET_ACCESS_KEY=$(echo "$identity" | grep -o '"SecretAccessKey": "[^"]*' | awk -F'"' '{print $4}')
          export AWS_SESSION_TOKEN=$(echo "$identity" | grep -o '"SessionToken": "[^"]*' | awk -F'"' '{print $4}')

          
          # Upload build artifact to S3 bucket and This command triggers the dev CodePipeline.
          if [ "${{ inputs.target_version }}" == "hotfix" ]; then
            aws s3 sync s3://sm018-hotfix-static-d-an2/hotfix/build s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ inputs.target_branch }}/build --delete --region ${{ needs.initial-tasks.outputs.region }}
          elif [ "${{ inputs.version }}" == "major" ]; then
            aws s3 sync s3://sm018-static-q-ue1/release/build/major s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ inputs.target_branch }}/build --delete --region ${{ needs.initial-tasks.outputs.region }}
            
            # store file to rollback bucket (CICD bucket)

            aws s3 sync s3://sm018-static-q-ue1/release/build/major ./rollback
            cd ./rollback
            zip -qry $GITHUB_WORKSPACE/frontend.zip ./
            aws s3 cp $GITHUB_WORKSPACE/frontend.zip s3://${{ needs.initial-tasks.outputs.s3_rollback_bucket }}/frontend/major/${{ inputs.release_version }}/frontend.zip --region ${{ needs.initial-tasks.outputs.region }}
          elif [ "${{ inputs.version }}" == "minor" ]; then
            aws s3 sync s3://sm018-static-q-ue1/release/build/minor s3://${{ needs.initial-tasks.outputs.s3_bucket }}/${{ inputs.target_branch }}/build --delete --region ${{ needs.initial-tasks.outputs.region }}
            
            # store file to rollback bucket (CICD bucket)

            aws s3 sync s3://sm018-static-q-ue1/release/build/minor ./rollback
            cd ./rollback
            zip -qry $GITHUB_WORKSPACE/frontend.zip ./
            aws s3 cp $GITHUB_WORKSPACE/frontend.zip s3://${{ needs.initial-tasks.outputs.s3_rollback_bucket }}/frontend/minor/${{ inputs.release_version }}/frontend.zip --region ${{ needs.initial-tasks.outputs.region }}
          fi

          # Setting CloudFront
          if [ "${{ inputs.version }}" == "major" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} --paths "/*"
          elif [ "${{ inputs.version }}" == "minor" ]; then
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id_minor }} --paths "/*"
          else
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id }} --paths "/*"
            aws cloudfront create-invalidation --distribution-id ${{ needs.initial-tasks.outputs.cloudfront_distribution_id_minor }} --paths "/*"
          fi
  